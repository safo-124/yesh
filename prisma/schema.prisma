// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your preferred DB (mysql, sqlite)
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  image     String? 
  password  String    // Add this for credentials-based login
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  bookings  Booking[]
   reviews Review[] // Add this relation
}

enum UserRole {
  USER
  ADMIN
   CASHIER 
}

model Booking {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  bookingType BookingType
  eventDate   DateTime
  partySize   Int
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime     @default(now())
}

enum BookingType {
  TABLE
  BIRTHDAY
  PARTY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model MenuItem {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  price       Float
  category    String      // e.g., "Appetizer", "Main Course", "Dessert"
  imageUrl    String      // URL from Vercel Blob
  isAvailable Boolean     @default(true)
  isFeatured  Boolean     @default(false)
  orderItems  OrderItem[]
  reviews Review[] // Add this relation
}

model Order {
  id         String      @id @default(cuid())
 userId     String? 
 user       User?       @relation(fields: [userId], references: [id]) 
  status     String      @default("PENDING") // e.g., PENDING, COMPLETED, CANCELLED
  totalPrice Float
  createdAt  DateTime    @default(now())
  items      OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int
  price      Float    // Price at the time of order
}

// Model to control site content from the dashboard
model SiteSettings {
  id          String @id @default(cuid())
  key         String @unique // e.g., "heroImageUrl", "announcementText"
  value       String
  updatedAt   DateTime @updatedAt
}

model GalleryImage {
  id        String   @id @default(cuid())
  imageUrl  String
  altText   String?  // Optional alt text for images
  order     Int      @default(0) // For reordering images later
  createdAt DateTime @default(now())
}

model AboutSection {
  id        String   @id @default(cuid())
  title     String   // e.g., "THE RESTAURANT", "THE CHEF"
  subtitle  String?  // e.g., "A Dream in the Hills", "Chef Adjei"
  content   String   @db.Text
  imageUrl  String
  imagePosition String @default("right") // "left" or "right"
  order     Int      @default(0)
  createdAt DateTime @default(now())
}

model Review {
  id         String   @id @default(cuid())
  rating     Int      // Rating from 1 to 5
  comment    String?  @db.Text
  createdAt  DateTime @default(now())
  
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@unique([userId, menuItemId]) // A user can only review a menu item once
}

model HomepageSection {
  id          String   @id @default(cuid())
  type        String   // e.g., 'HERO', 'CONTENT_IMAGE', 'FEATURED_ITEMS'
  order       Int      // For drag-and-drop reordering
  
  // Fields for all possible content
  title       String?
  subtitle    String?
  content     String?  @db.Text
  imageUrl    String?
  videoUrl    String?
  buttonText  String?
  buttonLink  String?
  layout      String?  // e.g., 'image-left', 'image-right'

  createdAt   DateTime @default(now())
}

model Event {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique // For the URL, e.g., /events/live-music-night
  description String   @db.Text
  imageUrl    String
  eventDate   DateTime
  createdAt   DateTime @default(now())
  isPublished Boolean  @default(false)
}
